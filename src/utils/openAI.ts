import OpenAI from "openai";


export function randomSelection(selectionChoice: "topic" | "questionLength" | "difficulty") {
  if (selectionChoice === "topic") {
    const topicChoiceList = ["baseball player", "baseball team", "baseball historical event", "MLB", "baseball rules", "baseball pitch", "baseball stadiums"]
    const randomIndex = Math.floor(Math.random() * topicChoiceList.length);
    return topicChoiceList[randomIndex];
  } else if (selectionChoice === "questionLength") {
    const questionLengthChoiceList = ["short", "medium", "long"]
    const randomIndex = Math.floor(Math.random() * questionLengthChoiceList.length);
    return questionLengthChoiceList[randomIndex];
  } else if (selectionChoice === "difficulty") {
    const difficultyChoiceList = ["easy", "medium", "hard"]
    const randomIndex = Math.floor(Math.random() * difficultyChoiceList.length);
    return difficultyChoiceList[randomIndex];
  }

}


export async function getTriviaQuestion(apiKey: string, language: TriviaLanguage = "english", model: string = "gpt-4o"): Promise<Omit<TriviaQuestion, "hint"> & { englishOptions: string[] }> {
  try {
    const questionTopic = randomSelection("topic") as string;
    console.log("I am in getTriviaQuestion")
    console.log({
      language,
      questionTopic,
    })
    const openai = new OpenAI({
      apiKey,
      timeout: 2000,
    });
    const response = await openai.chat.completions.create({
      model,
      messages: [
        {
          role: "system",
          content:
            `You are a trivia question generator. Provide a multiple-choice trivia question about baseball in JSON format. Ensure the format is: {question: string, options: string[], englisOptions:string[], answerIndex: number}. The answerIndex should indicate the correct answer's position in the options array. The language selected by the user is: ${language}
            Follow the below criteria for generating the question:
              1. The question should be about baseball.
              2. The question should be related to ${questionTopic} which could keep the fans engaged and entertained. 
              3. The question should be of medium complexity where the length of the question is enough that could be read and answered by the user within 15 seconds of the time. Additionally, only provide just 2 options for the user to select. Irrespective of the difficulty, do not make it obvious for the user to get to the answer.
              4. The question is to entertain the user so keep it fun and engaging. You can use emojis wherever required but do not overkill the question with emojis.
              5. If the language has been provided is not english then generate an array named as englishOptions that contains the english translation of the options you initially provided. If the output language is english, keep this array empty.
              7. Make sure the questions are unique and not repeated.
              8. In the final output, the response should not contain anything except the string which when parsed by the JSON parser of JS should give the object with the above keys. Any other text explaining or any other keywords added in the answer would cause the error. 
              9. Do not append the strings in the options array with any sort of serial numbers or alphabets.
              10. The type of question and MCQ answer and should be enough so that the user could read and answer the question within 15 seconds. 
              11. If the language has been provided you will generate the whole output in that specific language. Make sure to keep the keys in english as that would be used to parse the output.
              12. In the final response do not add any extra text like \`\`\`json or anything that would throw an error when parsing the repsonse.
              13. At the end when everything above mentioned has been followed, imagine you run the ouput throught JSON.stringify and the final string response that you get from there would be the final output.

            While generating output, takes gaps and pauses to think and analyze the final output generated by you. 
            `,
        },
      ],
      // Sets randomized temp (0-2)
      temperature: Number((Math.random() * 2).toFixed(1)),
    });

    const content = response.choices[0]?.message?.content;
    console.log("=================== content ===================")
    console.log(content)
    console.log("=================== content ===================")

    if (!content) {
      throw new Error("No response from OpenAI API.");
    }

    const parsedData = JSON.parse(content);
    // Validate response format
    if (
      !parsedData.question ||
      !Array.isArray(parsedData.options) ||
      typeof parsedData.answerIndex !== "number" ||
      !Array.isArray(parsedData.englishOptions) ||
      (language !== "english" && (parsedData.englishOptions).length !== (parsedData.options).length) ||
      parsedData.answerIndex < 0 ||
      parsedData.answerIndex >= parsedData.options.length
    ) {
      throw new Error("Invalid response format from OpenAI.");
    }
    console.log("content generated from inside openAI.ts is below: ")
    console.log("==================")
    console.log({
      question: parsedData.question,
      options: parsedData.options,
      answer: parsedData.answerIndex,
      englishOptions: parsedData.englishOptions,
      success: true,
    });
    console.log("==================")
    return {
      question: parsedData.question,
      options: parsedData.options,
      englishOptions: parsedData.englishOptions,
      answer: parsedData.answerIndex,
      success: true,
    };
  } catch (error) {
    console.error("Error fetching trivia question:", error);
    return {
      question: "",
      options: [],
      answer: -1,
      success: false,
      englishOptions: [],
    };
  }
}



export async function getPlayerFact(apiKey: string, playerName: string, language: TriviaLanguage = "english", model: string = "gpt-4o"): Promise<Omit<TriviaQuestion, "hint"> & { englishOptions: string[] }> {
  try {
    console.log("I am in getTriviaQuestion")
    console.log({
      language,
    })
    const openai = new OpenAI({
      apiKey,
      timeout: 2000,
    });
    const response = await openai.chat.completions.create({
      model,
      messages: [
        {
          role: "system",
          content:
            `You are a trivia question generator of guessing the player. Provide a two-choice  question about the following player ${playerName} with two options for the user to gues which player is being mentioned in the JSON format. Ensure the format is: {question: string, options: string[],englishOptions:[], answerIndex: number}. The answerIndex should indicate the correct answer's position in the options array. The language selected by the user is: ${language}
            Follow the below criteria for generating the question:
              1. The question should be about the player that has been selected.
              2. The question should be short that could be read withing 10 seconds. 
              3. The question should be of easy to difficulty method. Even if you find the difficulty of the question still make it tricky for the user to guess. In addition to this, do not make it obvious for the user to get to the answer.
              4. The question is to entertain the user so keep it fun and engaging. You can use emojis wherever required but do not overkill the question with emojis.
              5. If the language has been provided is not english then generate an array named as englishOptions that contains the english translation of the options you initially provided. If the output language is english, keep this array empty.
              7. Make sure the questions are unique and not repeated.
              8. In the final output, the response should not contain anything except the string which when parsed by the JSON parser of JS should give the object with the above keys. Any other text explaining or any other keywords added in the answer would cause the error. 
              9. Do not append the strings in the options array with any sort of serial numbers or alphabets. I need only two items in the options array one is the correct answer and the other is wrong answer.
              11. If the language has been provided you will generate the whole output in that specific language. Make sure to keep the keys in english as that would be used to parse the output.
              12. In the final response do not add any extra text like \`\`\`json or anything that would throw an error when parsing the repsonse.
              13. At the end when everything above mentioned has been followed, imagine you run the ouput throught JSON.stringify and the final string response that you get from there would be the final output.

            While generating output, takes gaps and pauses to think and analyze the final output generated by you. 
            `,
        },
      ],
      // Sets randomized temp (0-2)
      temperature: Number((Math.random() * 2).toFixed(1)),
    });

    const content = response.choices[0]?.message?.content;

    if (!content) {
      throw new Error("No response from OpenAI API.");
    }

    const parsedData = JSON.parse(content);
    // Validate response format
    if (
      !parsedData.question ||
      !Array.isArray(parsedData.options) ||
      !Array.isArray(parsedData.englishOptions) ||
      (language !== "english" && (parsedData.englishOptions).length !== (parsedData.options).length) ||
      typeof parsedData.answerIndex !== "number" ||
      parsedData.answerIndex < 0 ||
      parsedData.answerIndex >= parsedData.options.length
    ) {
      throw new Error("Invalid response format from OpenAI.");
    }
    console.log("content generated from inside guess the player openAI.ts is below: ")
    console.log("==================")
    console.log({
      question: parsedData.question,
      options: parsedData.options,
      answer: parsedData.answerIndex,
      englishOptions: parsedData.englishOptions,
      success: true,
    });
    console.log("==================")
    return {
      question: parsedData.question,
      options: parsedData.options,
      answer: parsedData.answerIndex,
      englishOptions: parsedData.englishOptions,
      success: true,
    };
  } catch (error) {
    console.error("Error fetching trivia question:", error);
    return {
      question: "",
      options: [],
      answer: -1,
      englishOptions: [],
      success: false,
    };
  }
}



